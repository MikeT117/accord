// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: channel.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createDirectChannel = `-- name: CreateDirectChannel :one
INSERT INTO channels (channel_type, creator_id)
VALUES ($1, $2)
RETURNING id, name, topic, channel_type, parent_role_sync, parent_id, creator_id, guild_id, created_at, updated_at
`

type CreateDirectChannelParams struct {
	ChannelType int16
	CreatorID   uuid.UUID
}

func (q *Queries) CreateDirectChannel(ctx context.Context, arg CreateDirectChannelParams) (Channel, error) {
	row := q.db.QueryRow(ctx, createDirectChannel, arg.ChannelType, arg.CreatorID)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Topic,
		&i.ChannelType,
		&i.ParentRoleSync,
		&i.ParentID,
		&i.CreatorID,
		&i.GuildID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createDirectChannelRecipients = `-- name: CreateDirectChannelRecipients :execrows
INSERT INTO channel_users (channel_id, user_id)
SELECT $1, id FROM users
WHERE id = ANY($2::uuid[])
`

type CreateDirectChannelRecipientsParams struct {
	ChannelID uuid.UUID
	UserIds   []uuid.UUID
}

func (q *Queries) CreateDirectChannelRecipients(ctx context.Context, arg CreateDirectChannelRecipientsParams) (int64, error) {
	result, err := q.db.Exec(ctx, createDirectChannelRecipients, arg.ChannelID, arg.UserIds)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const createGuildChannel = `-- name: CreateGuildChannel :one
INSERT INTO channels (guild_id, name, topic, channel_type, creator_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, topic, channel_type, parent_role_sync, parent_id, creator_id, guild_id, created_at, updated_at
`

type CreateGuildChannelParams struct {
	GuildID     pgtype.UUID
	Name        string
	Topic       string
	ChannelType int16
	CreatorID   uuid.UUID
}

func (q *Queries) CreateGuildChannel(ctx context.Context, arg CreateGuildChannelParams) (Channel, error) {
	row := q.db.QueryRow(ctx, createGuildChannel,
		arg.GuildID,
		arg.Name,
		arg.Topic,
		arg.ChannelType,
		arg.CreatorID,
	)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Topic,
		&i.ChannelType,
		&i.ParentRoleSync,
		&i.ParentID,
		&i.CreatorID,
		&i.GuildID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createGuildChannelCategory = `-- name: CreateGuildChannelCategory :one
INSERT INTO channels (guild_id, name, channel_type, creator_id)
VALUES ($1, $2, 1, $3)
RETURNING id, name, topic, channel_type, parent_role_sync, parent_id, creator_id, guild_id, created_at, updated_at
`

type CreateGuildChannelCategoryParams struct {
	GuildID   pgtype.UUID
	Name      string
	CreatorID uuid.UUID
}

func (q *Queries) CreateGuildChannelCategory(ctx context.Context, arg CreateGuildChannelCategoryParams) (Channel, error) {
	row := q.db.QueryRow(ctx, createGuildChannelCategory, arg.GuildID, arg.Name, arg.CreatorID)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Topic,
		&i.ChannelType,
		&i.ParentRoleSync,
		&i.ParentID,
		&i.CreatorID,
		&i.GuildID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChannel = `-- name: DeleteChannel :execrows
DELETE
FROM channels
WHERE id = $1
`

func (q *Queries) DeleteChannel(ctx context.Context, channelID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChannel, channelID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getManyGuildChannelsByGuildID = `-- name: GetManyGuildChannelsByGuildID :many
WITH guild_channels_cte AS (
  SELECT id, name, topic, channel_type, parent_role_sync, parent_id, creator_id, guild_id, created_at, updated_at
  FROM channels
  WHERE guild_id = $1
),

guild_role_channels_cte AS (
  SELECT channel_id, ARRAY_AGG(role_id) AS roles
  FROM guild_role_channels
  WHERE channel_id IN (
    SELECT id FROM guild_channels_cte
  ) GROUP BY channel_id
)

SELECT gcc.id, gcc.name, gcc.topic, gcc.channel_type, gcc.parent_role_sync, gcc.parent_id, gcc.creator_id, gcc.guild_id, gcc.created_at, gcc.updated_at, grcc.roles::UUID[] as roles
FROM guild_channels_cte gcc
INNER JOIN guild_role_channels_cte grcc ON grcc.channel_id = gcc.id
`

type GetManyGuildChannelsByGuildIDRow struct {
	ID             uuid.UUID
	Name           string
	Topic          string
	ChannelType    int16
	ParentRoleSync bool
	ParentID       pgtype.UUID
	CreatorID      uuid.UUID
	GuildID        pgtype.UUID
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	Roles          []uuid.UUID
}

func (q *Queries) GetManyGuildChannelsByGuildID(ctx context.Context, guildID pgtype.UUID) ([]GetManyGuildChannelsByGuildIDRow, error) {
	rows, err := q.db.Query(ctx, getManyGuildChannelsByGuildID, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetManyGuildChannelsByGuildIDRow{}
	for rows.Next() {
		var i GetManyGuildChannelsByGuildIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Topic,
			&i.ChannelType,
			&i.ParentRoleSync,
			&i.ParentID,
			&i.CreatorID,
			&i.GuildID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Roles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPrivateChannelUserByChannelIDAndUserID = `-- name: GetPrivateChannelUserByChannelIDAndUserID :execrows
SELECT user_id
FROM channel_users
WHERE channel_id = $1 AND user_id = $2
`

type GetPrivateChannelUserByChannelIDAndUserIDParams struct {
	ChannelID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) GetPrivateChannelUserByChannelIDAndUserID(ctx context.Context, arg GetPrivateChannelUserByChannelIDAndUserIDParams) (int64, error) {
	result, err := q.db.Exec(ctx, getPrivateChannelUserByChannelIDAndUserID, arg.ChannelID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateGuildChannel = `-- name: UpdateGuildChannel :one
UPDATE channels
SET name = $1, topic = $2, parent_role_sync = $3, parent_id = $4
WHERE id = $5 RETURNING id, name, topic, channel_type, parent_role_sync, parent_id, creator_id, guild_id, created_at, updated_at
`

type UpdateGuildChannelParams struct {
	Name           string
	Topic          string
	ParentRoleSync bool
	ParentID       pgtype.UUID
	ChannelID      uuid.UUID
}

func (q *Queries) UpdateGuildChannel(ctx context.Context, arg UpdateGuildChannelParams) (Channel, error) {
	row := q.db.QueryRow(ctx, updateGuildChannel,
		arg.Name,
		arg.Topic,
		arg.ParentRoleSync,
		arg.ParentID,
		arg.ChannelID,
	)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Topic,
		&i.ChannelType,
		&i.ParentRoleSync,
		&i.ParentID,
		&i.CreatorID,
		&i.GuildID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateGuildChannelCategory = `-- name: UpdateGuildChannelCategory :one
UPDATE channels
SET name = $1
WHERE id = $2 RETURNING id, name, topic, channel_type, parent_role_sync, parent_id, creator_id, guild_id, created_at, updated_at
`

type UpdateGuildChannelCategoryParams struct {
	Name      string
	ChannelID uuid.UUID
}

func (q *Queries) UpdateGuildChannelCategory(ctx context.Context, arg UpdateGuildChannelCategoryParams) (Channel, error) {
	row := q.db.QueryRow(ctx, updateGuildChannelCategory, arg.Name, arg.ChannelID)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Topic,
		&i.ChannelType,
		&i.ParentRoleSync,
		&i.ParentID,
		&i.CreatorID,
		&i.GuildID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePrivateChannel = `-- name: UpdatePrivateChannel :one
UPDATE channels
SET name = $1, topic = $2
WHERE id = $3 RETURNING id, name, topic, channel_type, parent_role_sync, parent_id, creator_id, guild_id, created_at, updated_at
`

type UpdatePrivateChannelParams struct {
	Name      string
	Topic     string
	ChannelID uuid.UUID
}

func (q *Queries) UpdatePrivateChannel(ctx context.Context, arg UpdatePrivateChannelParams) (Channel, error) {
	row := q.db.QueryRow(ctx, updatePrivateChannel, arg.Name, arg.Topic, arg.ChannelID)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Topic,
		&i.ChannelType,
		&i.ParentRoleSync,
		&i.ParentID,
		&i.CreatorID,
		&i.GuildID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
