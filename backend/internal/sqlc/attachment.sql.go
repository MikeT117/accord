// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: attachment.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createAttachment = `-- name: CreateAttachment :execrows
INSERT INTO
attachments
(id, resource_type, signature, attached_by_id, unix_timestamp, height, width, filesize)
VALUES
($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateAttachmentParams struct {
	ID            uuid.UUID
	ResourceType  string
	Signature     string
	AttachedByID  uuid.UUID
	UnixTimestamp int64
	Height        int32
	Width         int32
	Filesize      int32
}

func (q *Queries) CreateAttachment(ctx context.Context, arg CreateAttachmentParams) (int64, error) {
	result, err := q.db.Exec(ctx, createAttachment,
		arg.ID,
		arg.ResourceType,
		arg.Signature,
		arg.AttachedByID,
		arg.UnixTimestamp,
		arg.Height,
		arg.Width,
		arg.Filesize,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteAttachment = `-- name: DeleteAttachment :execrows
DELETE
FROM
attachments
WHERE
id = $1
AND
attached_by_id = $2
`

type DeleteAttachmentParams struct {
	AttachmentID uuid.UUID
	UserID       uuid.UUID
}

func (q *Queries) DeleteAttachment(ctx context.Context, arg DeleteAttachmentParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAttachment, arg.AttachmentID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAttachmentByID = `-- name: GetAttachmentByID :one
SELECT
id, resource_type, signature, unix_timestamp, attached_by_id, height, width, filesize, updated_at
FROM
attachments
WHERE
id = $1
`

func (q *Queries) GetAttachmentByID(ctx context.Context, attachmentID uuid.UUID) (Attachment, error) {
	row := q.db.QueryRow(ctx, getAttachmentByID, attachmentID)
	var i Attachment
	err := row.Scan(
		&i.ID,
		&i.ResourceType,
		&i.Signature,
		&i.UnixTimestamp,
		&i.AttachedByID,
		&i.Height,
		&i.Width,
		&i.Filesize,
		&i.UpdatedAt,
	)
	return i, err
}

const getAttachmentCountByMessageID = `-- name: GetAttachmentCountByMessageID :one
SELECT
COUNT(attachment_id)
FROM
channel_message_attachments
WHERE
channel_message_id = $1
`

func (q *Queries) GetAttachmentCountByMessageID(ctx context.Context, messageID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getAttachmentCountByMessageID, messageID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const linkAttachmentToGuild = `-- name: LinkAttachmentToGuild :execrows
WITH unlink_existing_cte AS (
  DELETE FROM
  guild_attachments
  WHERE
  guild_id = $2
  AND
  usage_type = $3
)

INSERT INTO
guild_attachments
(attachment_id, guild_id, usage_type)
VALUES
($1, $2, $3)
`

type LinkAttachmentToGuildParams struct {
	AttachmentID uuid.UUID
	GuildID      uuid.UUID
	UsageType    int32
}

func (q *Queries) LinkAttachmentToGuild(ctx context.Context, arg LinkAttachmentToGuildParams) (int64, error) {
	result, err := q.db.Exec(ctx, linkAttachmentToGuild, arg.AttachmentID, arg.GuildID, arg.UsageType)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const linkAttachmentToUser = `-- name: LinkAttachmentToUser :execrows
WITH unlink_existing_cte AS (
  DELETE FROM
  user_attachments
  WHERE
  user_id = $2
)

INSERT INTO
user_attachments
(attachment_id, user_id)
VALUES
($1, $2)
`

type LinkAttachmentToUserParams struct {
	AttachmentID uuid.UUID
	UserID       uuid.UUID
}

func (q *Queries) LinkAttachmentToUser(ctx context.Context, arg LinkAttachmentToUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, linkAttachmentToUser, arg.AttachmentID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const linkAttachmentsToChannelMessage = `-- name: LinkAttachmentsToChannelMessage :execrows
INSERT INTO
channel_message_attachments (attachment_id, channel_message_id)
SELECT
id,
$1
FROM
attachments
WHERE
id = ANY($2::uuid[])
`

type LinkAttachmentsToChannelMessageParams struct {
	MessageID     uuid.UUID
	AttachmentIds []uuid.UUID
}

func (q *Queries) LinkAttachmentsToChannelMessage(ctx context.Context, arg LinkAttachmentsToChannelMessageParams) (int64, error) {
	result, err := q.db.Exec(ctx, linkAttachmentsToChannelMessage, arg.MessageID, arg.AttachmentIds)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
