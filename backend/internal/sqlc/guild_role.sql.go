// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: guild_role.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const assignDefaultRoleToManyGuildChannels = `-- name: AssignDefaultRoleToManyGuildChannels :one
INSERT INTO guild_role_channels (role_id, channel_id)
SELECT gr.id, c.id
FROM channels c
INNER JOIN guild_roles gr ON gr.guild_id = c.guild_id
WHERE c.id = ANY($1::uuid[]) AND gr.name = '@default' AND gr.guild_id = $2
RETURNING role_id
`

type AssignDefaultRoleToManyGuildChannelsParams struct {
	ChannelIds []uuid.UUID
	GuildID    uuid.UUID
}

func (q *Queries) AssignDefaultRoleToManyGuildChannels(ctx context.Context, arg AssignDefaultRoleToManyGuildChannelsParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, assignDefaultRoleToManyGuildChannels, arg.ChannelIds, arg.GuildID)
	var role_id uuid.UUID
	err := row.Scan(&role_id)
	return role_id, err
}

const assignDefaultRoleToUser = `-- name: AssignDefaultRoleToUser :one
INSERT INTO guild_role_users (role_id, user_id)
SELECT gr.id, gm.user_id
FROM guild_members gm
INNER JOIN guild_roles gr ON gr.guild_id = gm.guild_id
WHERE gm.user_id = $1 AND gr.name = '@default' AND gm.guild_id = $2
RETURNING role_id
`

type AssignDefaultRoleToUserParams struct {
	UserID  uuid.UUID
	GuildID uuid.UUID
}

func (q *Queries) AssignDefaultRoleToUser(ctx context.Context, arg AssignDefaultRoleToUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, assignDefaultRoleToUser, arg.UserID, arg.GuildID)
	var role_id uuid.UUID
	err := row.Scan(&role_id)
	return role_id, err
}

const assignManyRolesToGuildChannel = `-- name: AssignManyRolesToGuildChannel :execrows
INSERT INTO guild_role_channels (role_id, channel_id)
SELECT gr.id, c.id
FROM channels c
INNER JOIN guild_roles gr ON gr.guild_id = c.guild_id
WHERE c.id = $1 AND gr.id = ANY($2::uuid[]) AND gr.guild_id = $3
`

type AssignManyRolesToGuildChannelParams struct {
	ChannelID uuid.UUID
	RoleIds   []uuid.UUID
	GuildID   uuid.UUID
}

func (q *Queries) AssignManyRolesToGuildChannel(ctx context.Context, arg AssignManyRolesToGuildChannelParams) (int64, error) {
	result, err := q.db.Exec(ctx, assignManyRolesToGuildChannel, arg.ChannelID, arg.RoleIds, arg.GuildID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const assignManyRolesToUser = `-- name: AssignManyRolesToUser :execrows
INSERT INTO guild_role_users (role_id, user_id)
SELECT gr.id, gm.user_id
FROM guild_members gm
INNER JOIN guild_roles gr ON gr.guild_id = gm.guild_id
WHERE gm.user_id = $1 AND gr.id = ANY($2::uuid[])AND gm.guild_id = $3
`

type AssignManyRolesToUserParams struct {
	UserID  uuid.UUID
	RoleIds []uuid.UUID
	GuildID uuid.UUID
}

func (q *Queries) AssignManyRolesToUser(ctx context.Context, arg AssignManyRolesToUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, assignManyRolesToUser, arg.UserID, arg.RoleIds, arg.GuildID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const assignOwnerRoleToManyGuildChannels = `-- name: AssignOwnerRoleToManyGuildChannels :one
INSERT INTO guild_role_channels (role_id, channel_id)
SELECT gr.id, c.id
FROM channels c
INNER JOIN guild_roles gr ON gr.guild_id = c.guild_id
WHERE c.id = ANY($1::uuid[]) AND gr.name = '@owner' AND gr.guild_id = $2
RETURNING role_id
`

type AssignOwnerRoleToManyGuildChannelsParams struct {
	ChannelIds []uuid.UUID
	GuildID    uuid.UUID
}

func (q *Queries) AssignOwnerRoleToManyGuildChannels(ctx context.Context, arg AssignOwnerRoleToManyGuildChannelsParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, assignOwnerRoleToManyGuildChannels, arg.ChannelIds, arg.GuildID)
	var role_id uuid.UUID
	err := row.Scan(&role_id)
	return role_id, err
}

const assignRoleToManyGuildChannels = `-- name: AssignRoleToManyGuildChannels :execrows
INSERT INTO guild_role_channels (role_id, channel_id)
SELECT gr.id, c.id
FROM channels c
INNER JOIN guild_roles gr ON gr.guild_id = c.guild_id
WHERE c.id = ANY($1::uuid[]) AND gr.id = $2 AND gr.guild_id = $3
`

type AssignRoleToManyGuildChannelsParams struct {
	ChannelIds []uuid.UUID
	RoleID     uuid.UUID
	GuildID    uuid.UUID
}

func (q *Queries) AssignRoleToManyGuildChannels(ctx context.Context, arg AssignRoleToManyGuildChannelsParams) (int64, error) {
	result, err := q.db.Exec(ctx, assignRoleToManyGuildChannels, arg.ChannelIds, arg.RoleID, arg.GuildID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const assignRoleToManyUsers = `-- name: AssignRoleToManyUsers :execrows
INSERT INTO guild_role_users (role_id, user_id)
SELECT gr.id, gm.user_id
FROM guild_members gm
INNER JOIN guild_roles gr ON gr.guild_id = gm.guild_id
WHERE gm.user_id = ANY($1::uuid[]) AND gr.id = $2 AND gm.guild_id = $3
`

type AssignRoleToManyUsersParams struct {
	UserIds []uuid.UUID
	RoleID  uuid.UUID
	GuildID uuid.UUID
}

func (q *Queries) AssignRoleToManyUsers(ctx context.Context, arg AssignRoleToManyUsersParams) (int64, error) {
	result, err := q.db.Exec(ctx, assignRoleToManyUsers, arg.UserIds, arg.RoleID, arg.GuildID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const creatGuildRole = `-- name: CreatGuildRole :one
INSERT INTO guild_roles (name, creator_id, guild_id, permissions)
VALUES ($1, $2, $3, $4)
RETURNING id, name, permissions, guild_id, creator_id, created_at, updated_at
`

type CreatGuildRoleParams struct {
	Name        string
	CreatorID   uuid.UUID
	GuildID     uuid.UUID
	Permissions int32
}

func (q *Queries) CreatGuildRole(ctx context.Context, arg CreatGuildRoleParams) (GuildRole, error) {
	row := q.db.QueryRow(ctx, creatGuildRole,
		arg.Name,
		arg.CreatorID,
		arg.GuildID,
		arg.Permissions,
	)
	var i GuildRole
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Permissions,
		&i.GuildID,
		&i.CreatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGuildRole = `-- name: DeleteGuildRole :execrows
DELETE
FROM guild_roles
WHERE id = $1 AND guild_id = $2
`

type DeleteGuildRoleParams struct {
	RoleID  uuid.UUID
	GuildID uuid.UUID
}

func (q *Queries) DeleteGuildRole(ctx context.Context, arg DeleteGuildRoleParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteGuildRole, arg.RoleID, arg.GuildID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getGuildRolePermissionsByUserIDAndChannelID = `-- name: GetGuildRolePermissionsByUserIDAndChannelID :one
Select COALESCE(bit_or(gr.permissions), -1)::int as permissions
FROM guild_roles gr
INNER JOIN guild_role_users gru ON gru.role_id = gr.id
INNER JOIN guild_role_channels grc ON grc.role_id = gr.id
WHERE gru.user_id = $1 AND grc.channel_id = $2
`

type GetGuildRolePermissionsByUserIDAndChannelIDParams struct {
	UserID    uuid.UUID
	ChannelID uuid.UUID
}

func (q *Queries) GetGuildRolePermissionsByUserIDAndChannelID(ctx context.Context, arg GetGuildRolePermissionsByUserIDAndChannelIDParams) (int32, error) {
	row := q.db.QueryRow(ctx, getGuildRolePermissionsByUserIDAndChannelID, arg.UserID, arg.ChannelID)
	var permissions int32
	err := row.Scan(&permissions)
	return permissions, err
}

const getGuildRolePermissionsByUserIDAndGuildID = `-- name: GetGuildRolePermissionsByUserIDAndGuildID :one
Select COALESCE(bit_or(gr.permissions), -1)::int as permissions
FROM guild_roles gr
INNER JOIN guild_role_users gru ON gru.role_id = gr.id
WHERE gr.guild_id = $1 AND gru.user_id = $2
`

type GetGuildRolePermissionsByUserIDAndGuildIDParams struct {
	GuildID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) GetGuildRolePermissionsByUserIDAndGuildID(ctx context.Context, arg GetGuildRolePermissionsByUserIDAndGuildIDParams) (int32, error) {
	row := q.db.QueryRow(ctx, getGuildRolePermissionsByUserIDAndGuildID, arg.GuildID, arg.UserID)
	var permissions int32
	err := row.Scan(&permissions)
	return permissions, err
}

const getManyGuildRoleIDsByUserID = `-- name: GetManyGuildRoleIDsByUserID :many
SELECT role_id
FROM guild_role_users
WHERE user_id = $1
`

func (q *Queries) GetManyGuildRoleIDsByUserID(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getManyGuildRoleIDsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var role_id uuid.UUID
		if err := rows.Scan(&role_id); err != nil {
			return nil, err
		}
		items = append(items, role_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getManyGuildRolesByGuildID = `-- name: GetManyGuildRolesByGuildID :many
SELECT id, name, permissions, guild_id, creator_id, created_at, updated_at
FROM guild_roles
WHERE guild_id = $1
`

func (q *Queries) GetManyGuildRolesByGuildID(ctx context.Context, guildID uuid.UUID) ([]GuildRole, error) {
	rows, err := q.db.Query(ctx, getManyGuildRolesByGuildID, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GuildRole{}
	for rows.Next() {
		var i GuildRole
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Permissions,
			&i.GuildID,
			&i.CreatorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleIDsByChannelID = `-- name: GetRoleIDsByChannelID :one
Select
ARRAY_AGG(grc.role_id)::text[] AS role_ids
FROM
guild_role_channels grc
WHERE
grc.channel_id = $1
`

func (q *Queries) GetRoleIDsByChannelID(ctx context.Context, channelID uuid.UUID) ([]string, error) {
	row := q.db.QueryRow(ctx, getRoleIDsByChannelID, channelID)
	var role_ids []string
	err := row.Scan(&role_ids)
	return role_ids, err
}

const unassignRoleFromGuildChannel = `-- name: UnassignRoleFromGuildChannel :execrows
DELETE
FROM guild_role_channels
WHERE role_id = $1 and channel_id = $2
`

type UnassignRoleFromGuildChannelParams struct {
	RoleID    uuid.UUID
	ChannelID uuid.UUID
}

func (q *Queries) UnassignRoleFromGuildChannel(ctx context.Context, arg UnassignRoleFromGuildChannelParams) (int64, error) {
	result, err := q.db.Exec(ctx, unassignRoleFromGuildChannel, arg.RoleID, arg.ChannelID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const unassignRoleFromUser = `-- name: UnassignRoleFromUser :execrows
DELETE
FROM guild_role_users
WHERE role_id = $1 AND user_id = $2
`

type UnassignRoleFromUserParams struct {
	RoleID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) UnassignRoleFromUser(ctx context.Context, arg UnassignRoleFromUserParams) (int64, error) {
	result, err := q.db.Exec(ctx, unassignRoleFromUser, arg.RoleID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateChannelParentID = `-- name: UpdateChannelParentID :one
UPDATE channels
SET
parent_id = $1::uuid
WHERE
id = $2
AND
guild_id = $3::uuid
RETURNING id, parent_id
`

type UpdateChannelParentIDParams struct {
	ParentID  uuid.UUID
	ChannelID uuid.UUID
	GuildID   uuid.UUID
}

type UpdateChannelParentIDRow struct {
	ID       uuid.UUID
	ParentID pgtype.UUID
}

func (q *Queries) UpdateChannelParentID(ctx context.Context, arg UpdateChannelParentIDParams) (UpdateChannelParentIDRow, error) {
	row := q.db.QueryRow(ctx, updateChannelParentID, arg.ParentID, arg.ChannelID, arg.GuildID)
	var i UpdateChannelParentIDRow
	err := row.Scan(&i.ID, &i.ParentID)
	return i, err
}

const updateChannelParentIDAndSyncPermissions = `-- name: UpdateChannelParentIDAndSyncPermissions :one
WITH update_channel_cte AS (
  UPDATE channels
  SET
  parent_id = $1::uuid
  WHERE
  id = $2
  AND
  guild_id = $3::uuid
  RETURNING id, parent_id
),

delete_existing_roles AS (
  DELETE
  FROM guild_role_channels
  WHERE channel_id = (
    SELECT id
    FROM update_channel_cte
  )
),

insert_parent_roles AS (
  INSERT INTO guild_role_channels (role_id, channel_id)
  SELECT grc.role_id, $2
  FROM guild_role_channels grc
  INNER JOIN update_channel_cte uccte ON uccte.parent_id = grc.channel_id
  RETURNING role_id
)

SELECT ARRAY_AGG(role_id)::uuid[] as roles
FROM insert_parent_roles
`

type UpdateChannelParentIDAndSyncPermissionsParams struct {
	ParentID  uuid.UUID
	ChannelID uuid.UUID
	GuildID   uuid.UUID
}

func (q *Queries) UpdateChannelParentIDAndSyncPermissions(ctx context.Context, arg UpdateChannelParentIDAndSyncPermissionsParams) ([]uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateChannelParentIDAndSyncPermissions, arg.ParentID, arg.ChannelID, arg.GuildID)
	var roles []uuid.UUID
	err := row.Scan(&roles)
	return roles, err
}

const updateGuildRole = `-- name: UpdateGuildRole :one
UPDATE guild_roles
SET name = $1, permissions = $2, updated_at = NOW()
WHERE id = $3 AND guild_id = $4 RETURNING id, name, permissions, guild_id, creator_id, created_at, updated_at
`

type UpdateGuildRoleParams struct {
	Name        string
	Permissions int32
	RoleID      uuid.UUID
	GuildID     uuid.UUID
}

func (q *Queries) UpdateGuildRole(ctx context.Context, arg UpdateGuildRoleParams) (GuildRole, error) {
	row := q.db.QueryRow(ctx, updateGuildRole,
		arg.Name,
		arg.Permissions,
		arg.RoleID,
		arg.GuildID,
	)
	var i GuildRole
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Permissions,
		&i.GuildID,
		&i.CreatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
