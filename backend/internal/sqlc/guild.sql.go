// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: guild.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGuild = `-- name: CreateGuild :one
INSERT INTO
guilds
(name, is_discoverable, creator_id, guild_category_id)
VALUES
($1, $2, $3, $4)
RETURNING
id, name, description, is_discoverable, channel_count, member_count, creator_id, guild_category_id, updated_at
`

type CreateGuildParams struct {
	Name            string
	IsDiscoverable  bool
	CreatorID       uuid.UUID
	GuildCategoryID pgtype.UUID
}

func (q *Queries) CreateGuild(ctx context.Context, arg CreateGuildParams) (Guild, error) {
	row := q.db.QueryRow(ctx, createGuild,
		arg.Name,
		arg.IsDiscoverable,
		arg.CreatorID,
		arg.GuildCategoryID,
	)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDiscoverable,
		&i.ChannelCount,
		&i.MemberCount,
		&i.CreatorID,
		&i.GuildCategoryID,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementGuildChannelCount = `-- name: DecrementGuildChannelCount :exec
UPDATE
guilds
SET
channel_count = (
    CASE
        WHEN channel_count > 0 THEN channel_count - 1
        ELSE channel_count
    END
)
WHERE
id = $1
`

func (q *Queries) DecrementGuildChannelCount(ctx context.Context, guildID uuid.UUID) error {
	_, err := q.db.Exec(ctx, decrementGuildChannelCount, guildID)
	return err
}

const decrementGuildMemberCount = `-- name: DecrementGuildMemberCount :exec
UPDATE
guilds
SET
member_count = (
    CASE
        WHEN member_count > 0 THEN member_count - 1
        ELSE member_count
    END
)
WHERE
id = $1
`

func (q *Queries) DecrementGuildMemberCount(ctx context.Context, guildID uuid.UUID) error {
	_, err := q.db.Exec(ctx, decrementGuildMemberCount, guildID)
	return err
}

const deleteGuild = `-- name: DeleteGuild :exec
DELETE
FROM
guilds
WHERE
id = $1
`

func (q *Queries) DeleteGuild(ctx context.Context, guildID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGuild, guildID)
	return err
}

const getGuildByID = `-- name: GetGuildByID :one
WITH guild_cte AS (
    SELECT
    id, name, description, is_discoverable, channel_count, member_count, creator_id, guild_category_id, updated_at
    FROM
    guilds
    WHERE
    id = $1
),

icon_cte AS (
  SELECT
  attachment_id,
  guild_id
  FROM
  guild_attachments ga
  WHERE
  guild_id IN (
    SELECT
    id
    FROM
    guild_cte
  ) AND
  usage_type = 0
),

banner_cte AS (
  SELECT
  attachment_id, guild_id
  FROM
  guild_attachments ga
  WHERE
  guild_id IN (
    SELECT
    id
    FROM
    guild_cte
  ) AND
  usage_type = 1
)

SELECT
gcte.id, gcte.name, gcte.description, gcte.is_discoverable, gcte.channel_count, gcte.member_count, gcte.creator_id, gcte.guild_category_id, gcte.updated_at,
icte.attachment_id as icon,
bcte.attachment_id as banner
FROM
guild_cte gcte
LEFT JOIN
icon_cte icte ON icte.guild_id = gcte.id
LEFT JOIN
banner_cte bcte ON bcte.guild_id = gcte.id
`

type GetGuildByIDRow struct {
	ID              uuid.UUID
	Name            string
	Description     string
	IsDiscoverable  bool
	ChannelCount    int32
	MemberCount     int32
	CreatorID       uuid.UUID
	GuildCategoryID pgtype.UUID
	UpdatedAt       pgtype.Timestamp
	Icon            pgtype.UUID
	Banner          pgtype.UUID
}

func (q *Queries) GetGuildByID(ctx context.Context, guildID uuid.UUID) (GetGuildByIDRow, error) {
	row := q.db.QueryRow(ctx, getGuildByID, guildID)
	var i GetGuildByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDiscoverable,
		&i.ChannelCount,
		&i.MemberCount,
		&i.CreatorID,
		&i.GuildCategoryID,
		&i.UpdatedAt,
		&i.Icon,
		&i.Banner,
	)
	return i, err
}

const getGuildDiscoverableStatusByID = `-- name: GetGuildDiscoverableStatusByID :one
SELECT
is_discoverable
FROM
guilds
WHERE
id = $1
`

func (q *Queries) GetGuildDiscoverableStatusByID(ctx context.Context, guildID uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, getGuildDiscoverableStatusByID, guildID)
	var is_discoverable bool
	err := row.Scan(&is_discoverable)
	return is_discoverable, err
}

const getManyDiscoverableGuilds = `-- name: GetManyDiscoverableGuilds :many
WITH guilds_cte AS (
    SELECT
    id,
    name,
    description,
    member_count,
    guild_category_id
    FROM
    guilds
    WHERE
    is_discoverable
    AND
    (CASE
        WHEN $1::uuid IS NOT NULL THEN id < $1::uuid
        ELSE TRUE
    END)
    AND
    (CASE
        WHEN $2::uuid IS NOT NULL THEN id > $2::uuid
        ELSE TRUE
    END)
    AND
    (CASE
        WHEN $3::text IS NOT NULL THEN name ILIKE $3::text
        ELSE TRUE
    END)
    AND
    (CASE
        WHEN $4::uuid IS NOT NULL THEN guild_category_id = $4::uuid
        ELSE TRUE
    END)
    ORDER BY
    CASE
        WHEN $2::uuid IS NOT NULL THEN id
    END ASC,
    CASE
        WHEN $2::uuid IS NULL THEN id
    END DESC
    LIMIT
    $5
),

icon_cte AS (
  SELECT
  attachment_id, guild_id
  FROM
  guild_attachments ga
  WHERE
  guild_id IN (
    SELECT
    id
    FROM
    guilds_cte
  ) AND
  usage_type = 0
),

banner_cte AS (
  SELECT
  attachment_id, guild_id
  FROM
  guild_attachments ga
  WHERE
  guild_id IN (
    SELECT
    id
    FROM
    guilds_cte
  ) AND
  usage_type = 1
)

SELECT
gcte.id, gcte.name, gcte.description, gcte.member_count, gcte.guild_category_id,
icte.attachment_id as icon,
bcte.attachment_id as banner
FROM
guilds_cte gcte
LEFT JOIN
icon_cte icte ON icte.guild_id = gcte.id
LEFT JOIN
banner_cte bcte ON bcte.guild_id = gcte.id
`

type GetManyDiscoverableGuildsParams struct {
	Before       pgtype.UUID
	After        pgtype.UUID
	Name         pgtype.Text
	CategoryID   pgtype.UUID
	ResultsLimit int64
}

type GetManyDiscoverableGuildsRow struct {
	ID              uuid.UUID
	Name            string
	Description     string
	MemberCount     int32
	GuildCategoryID pgtype.UUID
	Icon            pgtype.UUID
	Banner          pgtype.UUID
}

func (q *Queries) GetManyDiscoverableGuilds(ctx context.Context, arg GetManyDiscoverableGuildsParams) ([]GetManyDiscoverableGuildsRow, error) {
	rows, err := q.db.Query(ctx, getManyDiscoverableGuilds,
		arg.Before,
		arg.After,
		arg.Name,
		arg.CategoryID,
		arg.ResultsLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetManyDiscoverableGuildsRow{}
	for rows.Next() {
		var i GetManyDiscoverableGuildsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.MemberCount,
			&i.GuildCategoryID,
			&i.Icon,
			&i.Banner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementGuildChannelCount = `-- name: IncrementGuildChannelCount :exec
UPDATE
guilds
SET
channel_count = channel_count + 1
WHERE
id = $1
`

func (q *Queries) IncrementGuildChannelCount(ctx context.Context, guildID uuid.UUID) error {
	_, err := q.db.Exec(ctx, incrementGuildChannelCount, guildID)
	return err
}

const incrementGuildMemberCount = `-- name: IncrementGuildMemberCount :exec
UPDATE
guilds
SET
member_count = member_count + 1
WHERE
id = $1
`

func (q *Queries) IncrementGuildMemberCount(ctx context.Context, guildID uuid.UUID) error {
	_, err := q.db.Exec(ctx, incrementGuildMemberCount, guildID)
	return err
}

const updateGuild = `-- name: UpdateGuild :one
WITH updated_guild_cte AS (
    UPDATE
    guilds
    SET
    name = $1,
    description = $2,
    is_discoverable = $3,
    guild_category_id = $4
    WHERE
    id = $5
    RETURNING
    id, name, description, is_discoverable, channel_count, member_count, creator_id, guild_category_id, updated_at
),

icon_cte AS (
  SELECT
  attachment_id,
  guild_id
  FROM
  guild_attachments ga
  WHERE
  guild_id IN (
    SELECT
    id
    FROM
    updated_guild_cte
  ) AND
  usage_type = 0
),

banner_cte AS (
  SELECT
  attachment_id,
  guild_id
  FROM
  guild_attachments ga
  WHERE
  guild_id IN (
    SELECT
    id
    FROM
    updated_guild_cte
  ) AND
  usage_type = 1
)

SELECT
ugcte.id, ugcte.name, ugcte.description, ugcte.is_discoverable, ugcte.channel_count, ugcte.member_count, ugcte.creator_id, ugcte.guild_category_id, ugcte.updated_at,
icte.attachment_id as icon,
bcte.attachment_id as banner
FROM
updated_guild_cte ugcte
LEFT JOIN
icon_cte icte ON icte.guild_id = ugcte.id
LEFT JOIN
banner_cte bcte ON bcte.guild_id = ugcte.id
`

type UpdateGuildParams struct {
	Name            string
	Description     string
	IsDiscoverable  bool
	GuildCategoryID pgtype.UUID
	GuildID         uuid.UUID
}

type UpdateGuildRow struct {
	ID              uuid.UUID
	Name            string
	Description     string
	IsDiscoverable  bool
	ChannelCount    int32
	MemberCount     int32
	CreatorID       uuid.UUID
	GuildCategoryID pgtype.UUID
	UpdatedAt       pgtype.Timestamp
	Icon            pgtype.UUID
	Banner          pgtype.UUID
}

func (q *Queries) UpdateGuild(ctx context.Context, arg UpdateGuildParams) (UpdateGuildRow, error) {
	row := q.db.QueryRow(ctx, updateGuild,
		arg.Name,
		arg.Description,
		arg.IsDiscoverable,
		arg.GuildCategoryID,
		arg.GuildID,
	)
	var i UpdateGuildRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDiscoverable,
		&i.ChannelCount,
		&i.MemberCount,
		&i.CreatorID,
		&i.GuildCategoryID,
		&i.UpdatedAt,
		&i.Icon,
		&i.Banner,
	)
	return i, err
}
