// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: guild_invites.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGuildInvite = `-- name: CreateGuildInvite :one
INSERT INTO guild_invites (user_id, guild_id)
SELECT gm.user_id, gm.guild_id
FROM guild_members gm
WHERE gm.user_id = $1 AND gm.guild_id = $2
RETURNING id, status, used_count, user_id, guild_id, created_at, updated_at
`

type CreateGuildInviteParams struct {
	UserID  uuid.UUID
	GuildID uuid.UUID
}

func (q *Queries) CreateGuildInvite(ctx context.Context, arg CreateGuildInviteParams) (GuildInvite, error) {
	row := q.db.QueryRow(ctx, createGuildInvite, arg.UserID, arg.GuildID)
	var i GuildInvite
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.UsedCount,
		&i.UserID,
		&i.GuildID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGuildInvite = `-- name: DeleteGuildInvite :execrows
DELETE 
FROM guild_invites
WHERE id = $1 AND guild_id = $2
`

type DeleteGuildInviteParams struct {
	GuildInviteID uuid.UUID
	GuildID       uuid.UUID
}

func (q *Queries) DeleteGuildInvite(ctx context.Context, arg DeleteGuildInviteParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteGuildInvite, arg.GuildInviteID, arg.GuildID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getManyGuildInvitesByGuildID = `-- name: GetManyGuildInvitesByGuildID :many
SELECT id, status, used_count, user_id, guild_id, created_at, updated_at
FROM guild_invites
WHERE guild_id = $1 AND
    (CASE
        WHEN $2::timestamp IS NOT NULL THEN created_at < $2::timestamp
        ELSE TRUE
    END)
    AND 
    (CASE
        WHEN $3::timestamp IS NOT NULL THEN created_at > $3::timestamp
        ELSE TRUE
    END)
ORDER BY created_at DESC
LIMIT $4
`

type GetManyGuildInvitesByGuildIDParams struct {
	GuildID      uuid.UUID
	Before       pgtype.Timestamp
	After        pgtype.Timestamp
	ResultsLimit int64
}

func (q *Queries) GetManyGuildInvitesByGuildID(ctx context.Context, arg GetManyGuildInvitesByGuildIDParams) ([]GuildInvite, error) {
	rows, err := q.db.Query(ctx, getManyGuildInvitesByGuildID,
		arg.GuildID,
		arg.Before,
		arg.After,
		arg.ResultsLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GuildInvite{}
	for rows.Next() {
		var i GuildInvite
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.UsedCount,
			&i.UserID,
			&i.GuildID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
