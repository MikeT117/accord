// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: user_session.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO user_sessions (user_id, token, expires_at)
VALUES ($1, $2, $3)
RETURNING id, token, user_id, expires_at, created_at, updated_at
`

type CreateUserSessionParams struct {
	UserID    uuid.UUID
	Token     string
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, createUserSession, arg.UserID, arg.Token, arg.ExpiresAt)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserSession = `-- name: DeleteUserSession :exec
DELETE
FROM user_sessions
WHERE id = $1
`

func (q *Queries) DeleteUserSession(ctx context.Context, sessionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserSession, sessionID)
	return err
}

const getManyUserSessionsByID = `-- name: GetManyUserSessionsByID :many
SELECT id, token, user_id, expires_at, created_at, updated_at
FROM user_sessions
WHERE user_id = $1
`

func (q *Queries) GetManyUserSessionsByID(ctx context.Context, userID uuid.UUID) ([]UserSession, error) {
	rows, err := q.db.Query(ctx, getManyUserSessionsByID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserSession{}
	for rows.Next() {
		var i UserSession
		if err := rows.Scan(
			&i.ID,
			&i.Token,
			&i.UserID,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSessionByID = `-- name: GetUserSessionByID :one
SELECT id, token, user_id, expires_at, created_at, updated_at
FROM user_sessions
WHERE id = $1
`

func (q *Queries) GetUserSessionByID(ctx context.Context, sessionID uuid.UUID) (UserSession, error) {
	row := q.db.QueryRow(ctx, getUserSessionByID, sessionID)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserSessionByToken = `-- name: GetUserSessionByToken :one
SELECT id, token, user_id, expires_at, created_at, updated_at
FROM user_sessions
WHERE token = $1
`

func (q *Queries) GetUserSessionByToken(ctx context.Context, token string) (UserSession, error) {
	row := q.db.QueryRow(ctx, getUserSessionByToken, token)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
