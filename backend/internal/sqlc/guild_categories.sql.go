// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: guild_categories.sql

package sqlc

import (
	"context"
)

const createOrGetGuildCategory = `-- name: CreateOrGetGuildCategory :one
INSERT INTO
guild_categories
(name)
VALUES
($1)
ON CONFLICT (name) DO UPDATE
SET NAME = guild_categories.name
RETURNING
id, name
`

func (q *Queries) CreateOrGetGuildCategory(ctx context.Context, name string) (GuildCategory, error) {
	row := q.db.QueryRow(ctx, createOrGetGuildCategory, name)
	var i GuildCategory
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getManyGuildCategories = `-- name: GetManyGuildCategories :many
SELECT
id, name
FROM guild_categories
`

func (q *Queries) GetManyGuildCategories(ctx context.Context) ([]GuildCategory, error) {
	rows, err := q.db.Query(ctx, getManyGuildCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GuildCategory{}
	for rows.Next() {
		var i GuildCategory
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
