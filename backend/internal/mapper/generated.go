// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package mapper

import (
	goverter "github.com/MikeT117/accord/backend/internal/goverter"
	sqlc "github.com/MikeT117/accord/backend/internal/sqlc"
	models "github.com/MikeT117/accord/backend/models"
	uuid "github.com/google/uuid"
)

type ConverterImpl struct{}

func (c *ConverterImpl) ConvertGetManyDiscoverableGuildsRowToDiscoverableGuild(source sqlc.GetManyDiscoverableGuildsRow) models.DiscoverableGuild {
	var modelsDiscoverableGuild models.DiscoverableGuild
	modelsDiscoverableGuild.ID = source.ID
	modelsDiscoverableGuild.Name = source.Name
	modelsDiscoverableGuild.Description = source.Description
	modelsDiscoverableGuild.MemberCount = source.MemberCount
	modelsDiscoverableGuild.GuildCategoryID = goverter.PGTypeUUIDToNullableUUID(source.GuildCategoryID)
	modelsDiscoverableGuild.CreatedAt = goverter.PGTypeTimestampToTime(source.CreatedAt)
	modelsDiscoverableGuild.Icon = goverter.PGTypeUUIDToNullableUUID(source.Icon)
	modelsDiscoverableGuild.Banner = goverter.PGTypeUUIDToNullableUUID(source.Banner)
	return modelsDiscoverableGuild
}
func (c *ConverterImpl) ConvertGetManyDiscoverableGuildsRowToDiscoverableGuilds(source []sqlc.GetManyDiscoverableGuildsRow) []models.DiscoverableGuild {
	var modelsDiscoverableGuildList []models.DiscoverableGuild
	if source != nil {
		modelsDiscoverableGuildList = make([]models.DiscoverableGuild, len(source))
		for i := 0; i < len(source); i++ {
			modelsDiscoverableGuildList[i] = c.ConvertGetManyDiscoverableGuildsRowToDiscoverableGuild(source[i])
		}
	}
	return modelsDiscoverableGuildList
}
func (c *ConverterImpl) ConvertGetUserByIDRowToUser(source sqlc.GetUserByIDRow) models.UserLimited {
	var modelsUserLimited models.UserLimited
	modelsUserLimited.ID = source.ID
	modelsUserLimited.Avatar = goverter.PGTypeUUIDToNullableUUID(source.AttachmentID)
	modelsUserLimited.DisplayName = source.DisplayName
	modelsUserLimited.Username = source.Username
	modelsUserLimited.PublicFlags = source.PublicFlags
	return modelsUserLimited
}
func (c *ConverterImpl) ConvertSQLCChannelToGuildChannel(source sqlc.Channel) models.GuildChannel {
	var modelsGuildChannel models.GuildChannel
	modelsGuildChannel.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsGuildChannel.Name = source.Name
	modelsGuildChannel.GuildID = goverter.ConvertPGTypeUUIDToUUID(source.GuildID)
	modelsGuildChannel.Topic = source.Topic
	modelsGuildChannel.ChannelType = source.ChannelType
	modelsGuildChannel.ParentID = source.ParentID
	modelsGuildChannel.CreatorID = c.uuidUUIDToUuidUUID(source.CreatorID)
	modelsGuildChannel.CreatedAt = goverter.PGTypeTimestampToTime(source.CreatedAt)
	modelsGuildChannel.UpdatedAt = goverter.PGTypeTimestampToTime(source.UpdatedAt)
	return modelsGuildChannel
}
func (c *ConverterImpl) ConvertSQLCChannelToPrivateChannel(source sqlc.Channel) models.PrivateChannel {
	var modelsPrivateChannel models.PrivateChannel
	modelsPrivateChannel.ID = c.uuidUUIDToUuidUUID(source.ID)
	pString := source.Name
	modelsPrivateChannel.Name = &pString
	pString2 := source.Topic
	modelsPrivateChannel.Topic = &pString2
	modelsPrivateChannel.ChannelType = source.ChannelType
	modelsPrivateChannel.CreatorID = c.uuidUUIDToUuidUUID(source.CreatorID)
	modelsPrivateChannel.CreatedAt = goverter.PGTypeTimestampToTime(source.CreatedAt)
	modelsPrivateChannel.UpdatedAt = goverter.PGTypeTimestampToTime(source.UpdatedAt)
	return modelsPrivateChannel
}
func (c *ConverterImpl) ConvertSQLCChannelToUpdatedChannel(source sqlc.Channel) models.UpdatedChannel {
	var modelsUpdatedChannel models.UpdatedChannel
	modelsUpdatedChannel.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsUpdatedChannel.Name = source.Name
	modelsUpdatedChannel.Topic = source.Topic
	modelsUpdatedChannel.GuildID = source.GuildID
	return modelsUpdatedChannel
}
func (c *ConverterImpl) ConvertSQLCCreateChannelMessageRowToMessage(source sqlc.CreateChannelMessageRow) models.ChannelMessage {
	var modelsChannelMessage models.ChannelMessage
	modelsChannelMessage.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsChannelMessage.ChannelID = c.uuidUUIDToUuidUUID(source.ChannelID)
	modelsChannelMessage.Content = source.Content
	modelsChannelMessage.IsPinned = source.IsPinned
	modelsChannelMessage.Flags = source.Flags
	modelsChannelMessage.CreatedAt = goverter.PGTypeTimestampToTime(source.CreatedAt)
	modelsChannelMessage.UpdatedAt = goverter.ConvertPGTypeTimestampToNullableTime(source.UpdatedAt)
	modelsChannelMessage.Author = goverter.ConvertCreateChannelMessageRowToAuthor(source)
	modelsChannelMessage.Attachments = source.Attachments
	return modelsChannelMessage
}
func (c *ConverterImpl) ConvertSQLCGetGuildInviteByIDRowToGuildInviteLimited(source sqlc.GetGuildInviteByIDRow) models.GuildInviteLimited {
	var modelsGuildInviteLimited models.GuildInviteLimited
	modelsGuildInviteLimited.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsGuildInviteLimited.Name = source.Name
	modelsGuildInviteLimited.Description = source.Description
	modelsGuildInviteLimited.MemberCount = source.MemberCount
	modelsGuildInviteLimited.GuildID = c.uuidUUIDToUuidUUID(source.GuildID)
	modelsGuildInviteLimited.Icon = goverter.PGTypeUUIDToNullableUUID(source.Icon)
	modelsGuildInviteLimited.Banner = goverter.PGTypeUUIDToNullableUUID(source.Banner)
	return modelsGuildInviteLimited
}
func (c *ConverterImpl) ConvertSQLCGetManyAssignableGuildMembersByRoleIDAndGuildIDRowToGuildMember(source sqlc.GetManyAssignableGuildMembersByGuildIDAndRoleIDRow) models.GuildMemberLimited {
	var modelsGuildMemberLimited models.GuildMemberLimited
	modelsGuildMemberLimited.JoinedAt = goverter.PGTypeTimestampToTime(source.JoinedAt)
	modelsGuildMemberLimited.User = goverter.GetManyAssignableGuildMembersByGuildIDAndRoleIDRowToUser(source)
	modelsGuildMemberLimited.Roles = source.Roles
	return modelsGuildMemberLimited
}
func (c *ConverterImpl) ConvertSQLCGetManyAssignableGuildMembersByRoleIDAndGuildIDRowToGuildMembers(source []sqlc.GetManyAssignableGuildMembersByGuildIDAndRoleIDRow) []models.GuildMemberLimited {
	var modelsGuildMemberLimitedList []models.GuildMemberLimited
	if source != nil {
		modelsGuildMemberLimitedList = make([]models.GuildMemberLimited, len(source))
		for i := 0; i < len(source); i++ {
			modelsGuildMemberLimitedList[i] = c.ConvertSQLCGetManyAssignableGuildMembersByRoleIDAndGuildIDRowToGuildMember(source[i])
		}
	}
	return modelsGuildMemberLimitedList
}
func (c *ConverterImpl) ConvertSQLCGetManyChannelMessagesByChannelIDRowToMessage(source sqlc.GetManyChannelMessagesByChannelIDRow) models.ChannelMessage {
	var modelsChannelMessage models.ChannelMessage
	modelsChannelMessage.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsChannelMessage.ChannelID = c.uuidUUIDToUuidUUID(source.ChannelID)
	modelsChannelMessage.Content = source.Content
	modelsChannelMessage.IsPinned = source.IsPinned
	modelsChannelMessage.Flags = source.Flags
	modelsChannelMessage.CreatedAt = goverter.PGTypeTimestampToTime(source.CreatedAt)
	modelsChannelMessage.UpdatedAt = goverter.ConvertPGTypeTimestampToNullableTime(source.UpdatedAt)
	modelsChannelMessage.Author = goverter.ConvertGetManyChannelMessagesByChannelIDRowToAuthor(source)
	modelsChannelMessage.Attachments = source.Attachments
	return modelsChannelMessage
}
func (c *ConverterImpl) ConvertSQLCGetManyChannelMessagesByChannelIDRowsToManyMessage(source []sqlc.GetManyChannelMessagesByChannelIDRow) []models.ChannelMessage {
	var modelsChannelMessageList []models.ChannelMessage
	if source != nil {
		modelsChannelMessageList = make([]models.ChannelMessage, len(source))
		for i := 0; i < len(source); i++ {
			modelsChannelMessageList[i] = c.ConvertSQLCGetManyChannelMessagesByChannelIDRowToMessage(source[i])
		}
	}
	return modelsChannelMessageList
}
func (c *ConverterImpl) ConvertSQLCGetManyGuildBansByGuildIDRowToGuildBan(source sqlc.GetManyGuildBansByGuildIDRow) models.GuildBan {
	var modelsGuildBan models.GuildBan
	modelsGuildBan.Reason = source.Reason
	modelsGuildBan.BannedAt = goverter.PGTypeTimestampToTime(source.BannedAt)
	modelsGuildBan.User = goverter.GetManyGuildBansByGuildIDRowToUser(source)
	return modelsGuildBan
}
func (c *ConverterImpl) ConvertSQLCGetManyGuildBansByGuildIDRowToGuildBans(source []sqlc.GetManyGuildBansByGuildIDRow) []models.GuildBan {
	var modelsGuildBanList []models.GuildBan
	if source != nil {
		modelsGuildBanList = make([]models.GuildBan, len(source))
		for i := 0; i < len(source); i++ {
			modelsGuildBanList[i] = c.ConvertSQLCGetManyGuildBansByGuildIDRowToGuildBan(source[i])
		}
	}
	return modelsGuildBanList
}
func (c *ConverterImpl) ConvertSQLCGetManyGuildChannelsByGuildIDRowToGuildChannel(source []sqlc.GetManyGuildChannelsByGuildIDRow) []models.GuildChannel {
	var modelsGuildChannelList []models.GuildChannel
	if source != nil {
		modelsGuildChannelList = make([]models.GuildChannel, len(source))
		for i := 0; i < len(source); i++ {
			modelsGuildChannelList[i] = c.sqlcGetManyGuildChannelsByGuildIDRowToModelsGuildChannel(source[i])
		}
	}
	return modelsGuildChannelList
}
func (c *ConverterImpl) ConvertSQLCGetManyGuildInvitesByGuildIDRowToGuildInvite(source sqlc.GetManyGuildInvitesByGuildIDRow) models.GuildInvite {
	var modelsGuildInvite models.GuildInvite
	modelsGuildInvite.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsGuildInvite.Flags = source.Flags
	modelsGuildInvite.UsedCount = source.UsedCount
	modelsGuildInvite.CreatedAt = goverter.PGTypeTimestampToTime(source.CreatedAt)
	modelsGuildInvite.UpdatedAt = goverter.PGTypeTimestampToTime(source.UpdatedAt)
	modelsGuildInvite.Creator = goverter.ConvertGetManyGuildInvitesByGuildIDRowToGuildInviteToCreator(source)
	return modelsGuildInvite
}
func (c *ConverterImpl) ConvertSQLCGetManyGuildInvitesByGuildIDRowToGuildInvites(source []sqlc.GetManyGuildInvitesByGuildIDRow) []models.GuildInvite {
	var modelsGuildInviteList []models.GuildInvite
	if source != nil {
		modelsGuildInviteList = make([]models.GuildInvite, len(source))
		for i := 0; i < len(source); i++ {
			modelsGuildInviteList[i] = c.ConvertSQLCGetManyGuildInvitesByGuildIDRowToGuildInvite(source[i])
		}
	}
	return modelsGuildInviteList
}
func (c *ConverterImpl) ConvertSQLCGetManyGuildMembersByGuildIDRowToGuildMember(source sqlc.GetManyGuildMembersByGuildIDRow) models.GuildMemberLimited {
	var modelsGuildMemberLimited models.GuildMemberLimited
	modelsGuildMemberLimited.JoinedAt = goverter.PGTypeTimestampToTime(source.JoinedAt)
	modelsGuildMemberLimited.User = goverter.GetManyGuildMembersByGuildIDRowToUser(source)
	modelsGuildMemberLimited.Roles = source.Roles
	return modelsGuildMemberLimited
}
func (c *ConverterImpl) ConvertSQLCGetManyGuildMembersByGuildIDRowToGuildMembers(source []sqlc.GetManyGuildMembersByGuildIDRow) []models.GuildMemberLimited {
	var modelsGuildMemberLimitedList []models.GuildMemberLimited
	if source != nil {
		modelsGuildMemberLimitedList = make([]models.GuildMemberLimited, len(source))
		for i := 0; i < len(source); i++ {
			modelsGuildMemberLimitedList[i] = c.ConvertSQLCGetManyGuildMembersByGuildIDRowToGuildMember(source[i])
		}
	}
	return modelsGuildMemberLimitedList
}
func (c *ConverterImpl) ConvertSQLCGetManyUnassignableGuildMembersByRoleIDAndGuildIDRowToGuildMember(source sqlc.GetManyUnassignableGuildMembersByGuildIDAndRoleIDRow) models.GuildMemberLimited {
	var modelsGuildMemberLimited models.GuildMemberLimited
	modelsGuildMemberLimited.JoinedAt = goverter.PGTypeTimestampToTime(source.JoinedAt)
	modelsGuildMemberLimited.User = goverter.GetManyUnassignableGuildMembersByGuildIDAndRoleIDRowToUser(source)
	modelsGuildMemberLimited.Roles = source.Roles
	return modelsGuildMemberLimited
}
func (c *ConverterImpl) ConvertSQLCGetManyUnassignableGuildMembersByRoleIDAndGuildIDRowToGuildMembers(source []sqlc.GetManyUnassignableGuildMembersByGuildIDAndRoleIDRow) []models.GuildMemberLimited {
	var modelsGuildMemberLimitedList []models.GuildMemberLimited
	if source != nil {
		modelsGuildMemberLimitedList = make([]models.GuildMemberLimited, len(source))
		for i := 0; i < len(source); i++ {
			modelsGuildMemberLimitedList[i] = c.ConvertSQLCGetManyUnassignableGuildMembersByRoleIDAndGuildIDRowToGuildMember(source[i])
		}
	}
	return modelsGuildMemberLimitedList
}
func (c *ConverterImpl) ConvertSQLCGetManyUserRelationshipsByUserIDRowToUserRelationship(source sqlc.GetManyUserRelationshipsByUserIDRow) models.UserRelationship {
	var modelsUserRelationship models.UserRelationship
	modelsUserRelationship.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsUserRelationship.CreatorID = c.uuidUUIDToUuidUUID(source.CreatorID)
	modelsUserRelationship.Status = source.Status
	modelsUserRelationship.CreatedAt = goverter.PGTypeTimestampToTime(source.CreatedAt)
	modelsUserRelationship.UpdatedAt = goverter.PGTypeTimestampToTime(source.UpdatedAt)
	modelsUserRelationship.User = goverter.GetManyUserRelationshipsByUserIDRowToUser(source)
	return modelsUserRelationship
}
func (c *ConverterImpl) ConvertSQLCGetManyUserRelationshipsByUserIDRowToUserRelationships(source []sqlc.GetManyUserRelationshipsByUserIDRow) []models.UserRelationship {
	var modelsUserRelationshipList []models.UserRelationship
	if source != nil {
		modelsUserRelationshipList = make([]models.UserRelationship, len(source))
		for i := 0; i < len(source); i++ {
			modelsUserRelationshipList[i] = c.ConvertSQLCGetManyUserRelationshipsByUserIDRowToUserRelationship(source[i])
		}
	}
	return modelsUserRelationshipList
}
func (c *ConverterImpl) ConvertSQLCGetManyUserSessionsByIDRowToUserSession(source sqlc.GetManyUserSessionsByIDRow) models.UserSessionLimited {
	var modelsUserSessionLimited models.UserSessionLimited
	modelsUserSessionLimited.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsUserSessionLimited.IsCurrentSession = source.IsCurrentSession
	modelsUserSessionLimited.CreatedAt = goverter.PGTypeTimestampToTime(source.CreatedAt)
	modelsUserSessionLimited.ExpiresAt = goverter.PGTypeTimestampToTime(source.ExpiresAt)
	return modelsUserSessionLimited
}
func (c *ConverterImpl) ConvertSQLCGetManyUserSessionsByIDRowToUserSessions(source []sqlc.GetManyUserSessionsByIDRow) []models.UserSessionLimited {
	var modelsUserSessionLimitedList []models.UserSessionLimited
	if source != nil {
		modelsUserSessionLimitedList = make([]models.UserSessionLimited, len(source))
		for i := 0; i < len(source); i++ {
			modelsUserSessionLimitedList[i] = c.ConvertSQLCGetManyUserSessionsByIDRowToUserSession(source[i])
		}
	}
	return modelsUserSessionLimitedList
}
func (c *ConverterImpl) ConvertSQLCGetManyUsersByIDsRowToUser(source sqlc.GetManyUsersByIDsRow) models.UserLimited {
	var modelsUserLimited models.UserLimited
	modelsUserLimited.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsUserLimited.Avatar = goverter.PGTypeUUIDToNullableUUID(source.AttachmentID)
	modelsUserLimited.DisplayName = source.DisplayName
	modelsUserLimited.Username = source.Username
	modelsUserLimited.PublicFlags = source.PublicFlags
	return modelsUserLimited
}
func (c *ConverterImpl) ConvertSQLCGetManyUsersByIDsRowToUsers(source []sqlc.GetManyUsersByIDsRow) []models.UserLimited {
	var modelsUserLimitedList []models.UserLimited
	if source != nil {
		modelsUserLimitedList = make([]models.UserLimited, len(source))
		for i := 0; i < len(source); i++ {
			modelsUserLimitedList[i] = c.ConvertSQLCGetManyUsersByIDsRowToUser(source[i])
		}
	}
	return modelsUserLimitedList
}
func (c *ConverterImpl) ConvertSQLCGetUserProfileByIDAndGuildIDRowToUserProfileWithGuildMember(source sqlc.GetUserProfileByIDAndGuildIDRow) models.UserProfileWithGuildMember {
	var modelsUserProfileWithGuildMember models.UserProfileWithGuildMember
	modelsUserProfileWithGuildMember.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsUserProfileWithGuildMember.DisplayName = source.DisplayName
	modelsUserProfileWithGuildMember.Username = source.Username
	modelsUserProfileWithGuildMember.PublicFlags = source.PublicFlags
	modelsUserProfileWithGuildMember.CreatedAt = goverter.PGTypeTimestampToTime(source.CreatedAt)
	modelsUserProfileWithGuildMember.Avatar = goverter.PGTypeUUIDToNullableUUID(source.AttachmentID)
	modelsUserProfileWithGuildMember.MutualGuilds = source.MutualGuilds
	modelsUserProfileWithGuildMember.GuildMember = c.sqlcGetUserProfileByIDAndGuildIDRowToModelsGuildMemberMinimal(source)
	return modelsUserProfileWithGuildMember
}
func (c *ConverterImpl) ConvertSQLCGetUserProfileByIDRowToUserProfile(source sqlc.GetUserProfileByIDRow) models.UserProfile {
	var modelsUserProfile models.UserProfile
	modelsUserProfile.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsUserProfile.DisplayName = source.DisplayName
	modelsUserProfile.Username = source.Username
	modelsUserProfile.PublicFlags = source.PublicFlags
	modelsUserProfile.CreatedAt = goverter.PGTypeTimestampToTime(source.CreatedAt)
	modelsUserProfile.Avatar = goverter.PGTypeUUIDToNullableUUID(source.AttachmentID)
	modelsUserProfile.MutualGuilds = source.MutualGuilds
	return modelsUserProfile
}
func (c *ConverterImpl) ConvertSQLCGuildCategoryToGuildCategories(source []sqlc.GuildCategory) []sqlc.GuildCategory {
	return source
}
func (c *ConverterImpl) ConvertSQLCGuildCategoryToGuildCategory(source sqlc.GuildCategory) sqlc.GuildCategory {
	return source
}
func (c *ConverterImpl) ConvertSQLCGuildMemberToGuildMember(source sqlc.GuildMember) models.GuildMember {
	var modelsGuildMember models.GuildMember
	modelsGuildMember.Nickname = goverter.ConvertPGTypeTextToNullableString(source.Nickname)
	modelsGuildMember.GuildID = c.uuidUUIDToUuidUUID(source.GuildID)
	modelsGuildMember.JoinedAt = goverter.PGTypeTimestampToTime(source.JoinedAt)
	modelsGuildMember.UpdatedAt = goverter.PGTypeTimestampToTime(source.UpdatedAt)
	return modelsGuildMember
}
func (c *ConverterImpl) ConvertSQLCGuildRoleToGuildRole(source sqlc.GuildRole) models.GuildRole {
	var modelsGuildRole models.GuildRole
	modelsGuildRole.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsGuildRole.Name = source.Name
	modelsGuildRole.Permissions = source.Permissions
	modelsGuildRole.GuildID = c.uuidUUIDToUuidUUID(source.GuildID)
	modelsGuildRole.CreatorID = c.uuidUUIDToUuidUUID(source.CreatorID)
	modelsGuildRole.CreatedAt = goverter.PGTypeTimestampToTime(source.CreatedAt)
	modelsGuildRole.UpdatedAt = goverter.PGTypeTimestampToTime(source.UpdatedAt)
	return modelsGuildRole
}
func (c *ConverterImpl) ConvertSQLCGuildRoleToGuildRoles(source []sqlc.GuildRole) []models.GuildRole {
	var modelsGuildRoleList []models.GuildRole
	if source != nil {
		modelsGuildRoleList = make([]models.GuildRole, len(source))
		for i := 0; i < len(source); i++ {
			modelsGuildRoleList[i] = c.ConvertSQLCGuildRoleToGuildRole(source[i])
		}
	}
	return modelsGuildRoleList
}
func (c *ConverterImpl) ConvertSQLCGuildToGuild(source sqlc.Guild) models.Guild {
	var modelsGuild models.Guild
	modelsGuild.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsGuild.Name = source.Name
	modelsGuild.Description = source.Description
	modelsGuild.IsDiscoverable = source.IsDiscoverable
	modelsGuild.CreatorID = c.uuidUUIDToUuidUUID(source.CreatorID)
	modelsGuild.GuildCategoryID = goverter.PGTypeUUIDToNullableUUID(source.GuildCategoryID)
	modelsGuild.ChannelCount = source.ChannelCount
	modelsGuild.MemberCount = source.MemberCount
	modelsGuild.CreatedAt = goverter.PGTypeTimestampToTime(source.CreatedAt)
	modelsGuild.UpdatedAt = goverter.PGTypeTimestampToTime(source.UpdatedAt)
	return modelsGuild
}
func (c *ConverterImpl) ConvertSQLCLinkRelationshipUserRowToUserLimited(source sqlc.LinkRelationshipUserRow) models.UserLimited {
	var modelsUserLimited models.UserLimited
	modelsUserLimited.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsUserLimited.Avatar = goverter.PGTypeUUIDToNullableUUID(source.AttachmentID)
	modelsUserLimited.DisplayName = source.DisplayName
	modelsUserLimited.Username = source.Username
	modelsUserLimited.PublicFlags = source.PublicFlags
	return modelsUserLimited
}
func (c *ConverterImpl) ConvertSQLCLinkRelationshipUsersRowToUserLimited(source sqlc.LinkManyRelationshipUsersRow) models.UserLimited {
	var modelsUserLimited models.UserLimited
	modelsUserLimited.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsUserLimited.Avatar = goverter.PGTypeUUIDToNullableUUID(source.AttachmentID)
	modelsUserLimited.DisplayName = source.DisplayName
	modelsUserLimited.Username = source.Username
	modelsUserLimited.PublicFlags = source.PublicFlags
	return modelsUserLimited
}
func (c *ConverterImpl) ConvertSQLCLinkRelationshipUsersRowToUsersLimited(source []sqlc.LinkManyRelationshipUsersRow) []models.UserLimited {
	var modelsUserLimitedList []models.UserLimited
	if source != nil {
		modelsUserLimitedList = make([]models.UserLimited, len(source))
		for i := 0; i < len(source); i++ {
			modelsUserLimitedList[i] = c.ConvertSQLCLinkRelationshipUsersRowToUserLimited(source[i])
		}
	}
	return modelsUserLimitedList
}
func (c *ConverterImpl) ConvertSQLCRelationshipToRelationship(source sqlc.Relationship) models.UserRelationship {
	var modelsUserRelationship models.UserRelationship
	modelsUserRelationship.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsUserRelationship.CreatorID = c.uuidUUIDToUuidUUID(source.CreatorID)
	modelsUserRelationship.Status = source.Status
	modelsUserRelationship.CreatedAt = goverter.PGTypeTimestampToTime(source.CreatedAt)
	modelsUserRelationship.UpdatedAt = goverter.PGTypeTimestampToTime(source.UpdatedAt)
	return modelsUserRelationship
}
func (c *ConverterImpl) ConvertSQLCUpdateChannelMessageRowUpdatedMessage(source sqlc.UpdateChannelMessageRow) models.UpdatedChannelMessage {
	var modelsUpdatedChannelMessage models.UpdatedChannelMessage
	modelsUpdatedChannelMessage.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsUpdatedChannelMessage.ChannelID = c.uuidUUIDToUuidUUID(source.ChannelID)
	modelsUpdatedChannelMessage.Content = source.Content
	modelsUpdatedChannelMessage.IsPinned = source.IsPinned
	modelsUpdatedChannelMessage.UpdatedAt = goverter.PGTypeTimestampToTime(source.UpdatedAt)
	return modelsUpdatedChannelMessage
}
func (c *ConverterImpl) ConvertSQLCUpdateUserRowToUpdateUser(source sqlc.UpdateUserRow) models.UpdatedUser {
	var modelsUpdatedUser models.UpdatedUser
	modelsUpdatedUser.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsUpdatedUser.Avatar = goverter.PGTypeUUIDToNullableUUID(source.AttachmentID)
	modelsUpdatedUser.DisplayName = source.DisplayName
	modelsUpdatedUser.PublicFlags = source.PublicFlags
	return modelsUpdatedUser
}
func (c *ConverterImpl) ConvertSQLUpdateGuildRowToUpdatedGuild(source sqlc.UpdateGuildRow) models.UpdatedGuild {
	var modelsUpdatedGuild models.UpdatedGuild
	modelsUpdatedGuild.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsUpdatedGuild.Name = source.Name
	modelsUpdatedGuild.Description = source.Description
	modelsUpdatedGuild.IsDiscoverable = source.IsDiscoverable
	modelsUpdatedGuild.Icon = goverter.PGTypeUUIDToNullableUUID(source.Icon)
	modelsUpdatedGuild.Banner = goverter.PGTypeUUIDToNullableUUID(source.Banner)
	modelsUpdatedGuild.GuildCategoryID = goverter.PGTypeUUIDToNullableUUID(source.GuildCategoryID)
	return modelsUpdatedGuild
}
func (c *ConverterImpl) sqlcGetManyGuildChannelsByGuildIDRowToModelsGuildChannel(source sqlc.GetManyGuildChannelsByGuildIDRow) models.GuildChannel {
	var modelsGuildChannel models.GuildChannel
	modelsGuildChannel.ID = c.uuidUUIDToUuidUUID(source.ID)
	modelsGuildChannel.Name = source.Name
	modelsGuildChannel.GuildID = goverter.ConvertPGTypeUUIDToUUID(source.GuildID)
	modelsGuildChannel.Topic = source.Topic
	modelsGuildChannel.ChannelType = source.ChannelType
	modelsGuildChannel.ParentID = source.ParentID
	modelsGuildChannel.CreatorID = c.uuidUUIDToUuidUUID(source.CreatorID)
	modelsGuildChannel.CreatedAt = goverter.PGTypeTimestampToTime(source.CreatedAt)
	modelsGuildChannel.UpdatedAt = goverter.PGTypeTimestampToTime(source.UpdatedAt)
	modelsGuildChannel.Roles = source.Roles
	return modelsGuildChannel
}
func (c *ConverterImpl) sqlcGetUserProfileByIDAndGuildIDRowToModelsGuildMemberMinimal(source sqlc.GetUserProfileByIDAndGuildIDRow) models.GuildMemberMinimal {
	var modelsGuildMemberMinimal models.GuildMemberMinimal
	modelsGuildMemberMinimal.JoinedAt = goverter.PGTypeTimestampToTime(source.JoinedAt)
	modelsGuildMemberMinimal.Roles = source.Roles
	return modelsGuildMemberMinimal
}
func (c *ConverterImpl) uuidUUIDToUuidUUID(source uuid.UUID) uuid.UUID {
	return source
}
